{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap-cell.html",
      "properties": [
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1998,
              "column": 4
            },
            "end": {
              "line": 2000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "x",
          "type": "Function",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2803,
              "column": 4
            },
            "end": {
              "line": 2806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.canvasLayersConfig"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "data",
          "type": "Object",
          "description": "Data used to draw the cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "showCellValue",
          "type": "boolean",
          "description": "True will render the data value in the cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "colorScale",
          "type": "Function",
          "description": "Function used to convert values to colors.\n\nExample of colorScale creation:\n\nconst colorScale = Px.d3.scaleLinear()\n  .domain([0, 25, 50])\n  .range(['blue', 'red', 'green']);",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "fillColor",
          "type": "string",
          "description": "Fill color of cell. If set, this color will override the default color\nwhich is calculated by the cell value and the color scale.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 65,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "strokeColor",
          "type": "string",
          "description": "Stroke color of cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "textAlign",
          "type": "string",
          "description": "Text alignment for the cell value text. Choice:\n'start'\n'middle'\n'end'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"middle\""
        },
        {
          "name": "textColor",
          "type": "string",
          "description": "Color of text inside cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"#000\""
        },
        {
          "name": "fontSize",
          "type": "string",
          "description": "Size of text inside cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "fontFamily",
          "type": "string",
          "description": "Font family of text inside cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "A delay time used for drawing/updating the cell.\nThis helps ensure the draw function is not called too\nmany times when not needed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "50"
        },
        {
          "name": "_svgGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 453,
              "column": 2
            },
            "end": {
              "line": 459,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 484,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getSvgElement",
          "description": "Returns SVG group element (<g>) which contains the cell drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getSvgTextElement",
          "description": "Returns SVG text element (<text>) which contains the cell value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_draw",
          "description": "Draw or update the cell.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawDebouncedCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawDebounced",
          "description": "Draw but delay by debounce time.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 239,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getValue",
          "description": "Gets value from this.data object using keys in the completeSeriesConfig.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 246,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ]
        },
        {
          "name": "_isValidSvgPoints",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_updateColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 260,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_appendRectangle",
          "description": "Draw rectangle to existing svg element. Coordinates passed in by 'data.x' and 'data.y'\nshould define the upper left point of the rectangle.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 6
            },
            "end": {
              "line": 274,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "strokeColor"
            },
            {
              "name": "fillColor"
            }
          ]
        },
        {
          "name": "_appendText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "text"
            },
            {
              "name": "color"
            },
            {
              "name": "textAnchor"
            },
            {
              "name": "fontFamily"
            },
            {
              "name": "fontSize"
            }
          ]
        },
        {
          "name": "_calcCellColor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_handleMouseOver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 304,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "svgEl"
            }
          ]
        },
        {
          "name": "_handleMouseOut",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 308,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "svgEl"
            }
          ]
        },
        {
          "name": "_handleClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "svgEl"
            }
          ]
        },
        {
          "name": "_fireEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 6
            },
            "end": {
              "line": 322,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventName"
            },
            {
              "name": "svgEl"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 12
        },
        "end": {
          "line": 324,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1998,
              "column": 4
            },
            "end": {
              "line": 2000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2803,
              "column": 4
            },
            "end": {
              "line": 2806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.canvasLayersConfig"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "data",
          "description": "Data used to draw the cell.",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "series-key",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "show-cell-value",
          "description": "True will render the data value in the cell.",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "color-scale",
          "description": "Function used to convert values to colors.\n\nExample of colorScale creation:\n\nconst colorScale = Px.d3.scaleLinear()\n  .domain([0, 25, 50])\n  .range(['blue', 'red', 'green']);",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "fill-color",
          "description": "Fill color of cell. If set, this color will override the default color\nwhich is calculated by the cell value and the color scale.",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 65,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "stroke-color",
          "description": "Stroke color of cell.",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "text-align",
          "description": "Text alignment for the cell value text. Choice:\n'start'\n'middle'\n'end'",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "text-color",
          "description": "Color of text inside cell.",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "font-size",
          "description": "Size of text inside cell.",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "font-family",
          "description": "Font family of text inside cell.",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "draw-debounce-time",
          "description": "A delay time used for drawing/updating the cell.\nThis helps ensure the draw function is not called too\nmany times when not needed.",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap-cell"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap-legend.html",
      "properties": [
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1092,
              "column": 4
            },
            "end": {
              "line": 1095,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1106,
              "column": 4
            },
            "end": {
              "line": 1109,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "Widht of the entire charting area.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 8
            },
            "end": {
              "line": 103,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the entire charting area.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "400"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1220,
              "column": 4
            },
            "end": {
              "line": 1223,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1998,
              "column": 4
            },
            "end": {
              "line": 2000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3252,
              "column": 4
            },
            "end": {
              "line": 3254,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3255,
              "column": 4
            },
            "end": {
              "line": 3258,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1190,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1198,
              "column": 4
            },
            "end": {
              "line": 1200,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "colorScale",
          "type": "Object",
          "description": "Function used to convert chart value to color value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Position and direction of the legend.\n\n'right': positioned vertically on the right of the chart.\n'bottom': positioned horizontally below the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "legendWidth",
          "type": "number",
          "description": "Widht of the color scale legend. This does not include the axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 8
            },
            "end": {
              "line": 94,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "50"
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time before drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "gapSize",
          "type": "number",
          "description": "Gap between the heatmap and this legend.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "20"
        },
        {
          "name": "borderColor",
          "type": "string",
          "description": "Color of border surrounding legend. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 135,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "borderWidth",
          "type": "string",
          "description": "Width of border surrounding legend. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_emptyChartData",
          "type": "Array",
          "description": "This component doesn't use chartData, but some px-vis\ncomps require a valid chart data object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 158,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_axisMargin",
          "type": "Object",
          "description": "Calculated margin used for the legend's axis.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 8
            },
            "end": {
              "line": 173,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"top\":0,\"right\":0,\"bottom\":0,\"left\":0}"
        },
        {
          "name": "_axisOrientation",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 178,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "_axisY",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 8
            },
            "end": {
              "line": 182,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisX",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 8
            },
            "end": {
              "line": 186,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 8
            },
            "end": {
              "line": 190,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisDomainChanged",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 8
            },
            "end": {
              "line": 195,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_axisExtents",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 199,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_rect",
          "type": "Object",
          "description": "svg rect object used to show gradient.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_gradientDef",
          "type": "Object",
          "description": "Svg definition for gradient.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 213,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_stylesResolved",
          "type": "boolean",
          "description": "Observe changes to this in order to know when css vars have changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 8
            },
            "end": {
              "line": 221,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3261,
              "column": 2
            },
            "end": {
              "line": 3282,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 878,
              "column": 4
            },
            "end": {
              "line": 896,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_defineGradient",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawRectangle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateRectangePosition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 352,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisMargin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 354,
              "column": 6
            },
            "end": {
              "line": 376,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisOrientation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 6
            },
            "end": {
              "line": 382,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_yAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 6
            },
            "end": {
              "line": 398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yAxisConfig"
            }
          ]
        },
        {
          "name": "_resolveCssVars",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 415,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 48,
          "column": 12
        },
        "end": {
          "line": 417,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1092,
              "column": 4
            },
            "end": {
              "line": 1095,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1106,
              "column": 4
            },
            "end": {
              "line": 1109,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "description": "Widht of the entire charting area.",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 8
            },
            "end": {
              "line": 103,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the entire charting area.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1220,
              "column": 4
            },
            "end": {
              "line": 1223,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1998,
              "column": 4
            },
            "end": {
              "line": 2000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1190,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1198,
              "column": 4
            },
            "end": {
              "line": 1200,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "color-scale",
          "description": "Function used to convert chart value to color value.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "orientation",
          "description": "Position and direction of the legend.\n\n'right': positioned vertically on the right of the chart.\n'bottom': positioned horizontally below the chart.",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "legend-width",
          "description": "Widht of the color scale legend. This does not include the axis.",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 8
            },
            "end": {
              "line": 94,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time before drawing.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "gap-size",
          "description": "Gap between the heatmap and this legend.",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "border-color",
          "description": "Color of border surrounding legend. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 135,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "border-width",
          "description": "Width of border surrounding legend. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap-legend"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap.html",
      "properties": [
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1092,
              "column": 4
            },
            "end": {
              "line": 1095,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1106,
              "column": 4
            },
            "end": {
              "line": 1109,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 8
            },
            "end": {
              "line": 238,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "500"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 247,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "500"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "Container for the data object that drives the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 8
            },
            "end": {
              "line": 222,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1220,
              "column": 4
            },
            "end": {
              "line": 1223,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 264,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"top\":10,\"right\":100,\"bottom\":50,\"left\":50}"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3252,
              "column": 4
            },
            "end": {
              "line": 3254,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3255,
              "column": 4
            },
            "end": {
              "line": 3258,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2803,
              "column": 4
            },
            "end": {
              "line": 2806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.canvasLayersConfig"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1190,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1198,
              "column": 4
            },
            "end": {
              "line": 1200,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "preventResize",
          "type": "boolean",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 766,
              "column": 6
            },
            "end": {
              "line": 770,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_preventResizeChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartHorizontalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 780,
              "column": 6
            },
            "end": {
              "line": 783,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartVerticalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 793,
              "column": 6
            },
            "end": {
              "line": 796,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_chartWrapperClass",
          "type": "string",
          "description": "Class to be used on the external wrapper within the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 800,
              "column": 6
            },
            "end": {
              "line": 803,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounceResizeTiming",
          "type": "number",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 808,
              "column": 6
            },
            "end": {
              "line": 811,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "250",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2255,
              "column": 5
            },
            "end": {
              "line": 2260,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "type": "Array",
          "description": "Array of the svg layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1428,
              "column": 4
            },
            "end": {
              "line": 1431,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "numberOfLayers",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1432,
              "column": 4
            },
            "end": {
              "line": 1434,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generateLayers",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1435,
              "column": 4
            },
            "end": {
              "line": 1438,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "pxSvgElemLower",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 280,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "Key that is tied to the seriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 8
            },
            "end": {
              "line": 229,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "squareMode",
          "type": "boolean",
          "description": "If true, the heatmap will always show cells as squares. The shortest\nof the x and y axis will be used for the length.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 8
            },
            "end": {
              "line": 273,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "showLegend",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 8
            },
            "end": {
              "line": 278,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "scalePadding",
          "type": "number",
          "description": "Padding between boxes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 8
            },
            "end": {
              "line": 286,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "paddingOuter",
          "type": "number",
          "description": "Padding between boxes and axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 8
            },
            "end": {
              "line": 294,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "showCellValue",
          "type": "boolean",
          "description": "Show the point value inside each cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 8
            },
            "end": {
              "line": 302,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "colors",
          "type": "Array",
          "description": "Colors to use for the heatmap.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 309,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "legendConfig",
          "type": "Object",
          "description": "Configuration object passed directly to the color scale legend.\nSee px-vis-heatmap-legend.html for available properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 8
            },
            "end": {
              "line": 317,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "tooltipDelay",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Delay draw by this amount of milliseconds.\nUseful for avoiding mutliple quick redraws.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 8
            },
            "end": {
              "line": 331,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "collapseAt",
          "type": "number",
          "description": "The width below which the context browser will collapse into a mobile\nfriendly menu that slides up from the bottom of the page. Use a number\n(e.g. `450`) which will be converted to a pixel value (e.g. '450px').\n\nIf no value is provided, the context browser will not collapse\nautomatically. The collapsed attribute can also be used to manually\ncollapse and un-collapse the context browser.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 8
            },
            "end": {
              "line": 344,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "collapsed",
          "type": "boolean",
          "description": "Watch for changes to determine if the context browser is collapsed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_collapsedChanged\""
            }
          }
        },
        {
          "name": "cellBorderColor",
          "type": "string",
          "description": "Color of cell border. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 8
            },
            "end": {
              "line": 361,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cellBorderWidth",
          "type": "string",
          "description": "Width of cell border. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 8
            },
            "end": {
              "line": 368,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cellTextColor",
          "type": "string",
          "description": "Color of text used for cell value. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 8
            },
            "end": {
              "line": 375,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "selectedCell",
          "type": "Object",
          "description": "Currently selected cell object. Setting this will cause the cell to be shown\nthe same way it would with a mouse hover event. This should be an object from the\nchartData array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 8
            },
            "end": {
              "line": 385,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectedCellChanged\""
            }
          }
        },
        {
          "name": "cellTextSize",
          "type": "string",
          "description": "Size of text used for cell value. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 8
            },
            "end": {
              "line": 392,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_cellData",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 8
            },
            "end": {
              "line": 396,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_colorsAreSet",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 8
            },
            "end": {
              "line": 401,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_internalColors",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 405,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_colorScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 407,
              "column": 8
            },
            "end": {
              "line": 409,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_legendOrientation",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 8
            },
            "end": {
              "line": 413,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_internalWidth",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 8
            },
            "end": {
              "line": 417,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_internalHeight",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_stylesResolved",
          "type": "boolean",
          "description": "Observe changes to this in order to know when css vars have changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 8
            },
            "end": {
              "line": 429,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2262,
              "column": 2
            },
            "end": {
              "line": 2269,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_preventResizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 814,
              "column": 4
            },
            "end": {
              "line": 822,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_secondaryToolbarToggled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 823,
              "column": 4
            },
            "end": {
              "line": 831,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_getChartWrapperClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 832,
              "column": 4
            },
            "end": {
              "line": 856,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hor"
            },
            {
              "name": "vert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_createLayers",
          "description": "Creates <g> layers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1448,
              "column": 2
            },
            "end": {
              "line": 1471,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createLayersOnce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1472,
              "column": 2
            },
            "end": {
              "line": 1483,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "generateLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "getImage",
          "description": "Takes a graphic \"snapshot\" of the component and pass results through a callback:\n- a canvas containing the graphical snapshot\n- a png base 64 data uri\n\ncallback object:\n{\n canvas: theCanvasObject\n image: \"data:image/png;base64;iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN...\"\n}\n\nthe data uri can be used to save the image and the canvas object to do\nfurther processing, such as combining different elements snapshot into one image",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 602,
              "column": 4
            },
            "end": {
              "line": 673,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "renderLegend"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_finishGetImage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 674,
              "column": 4
            },
            "end": {
              "line": 679,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "canvas"
            },
            {
              "name": "renderLegend"
            },
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_getRegisterWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 680,
              "column": 4
            },
            "end": {
              "line": 714,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_drawRegister",
          "description": "Draws a fake representation of the registers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 718,
              "column": 4
            },
            "end": {
              "line": 746,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "startWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 878,
              "column": 4
            },
            "end": {
              "line": 896,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_drawCells",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 6
            },
            "end": {
              "line": 477,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawCell",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 503,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvasContext"
            },
            {
              "name": "cellData"
            }
          ]
        },
        {
          "name": "_collapseQueryIsValid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 505,
              "column": 6
            },
            "end": {
              "line": 513,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query"
            }
          ]
        },
        {
          "name": "_getCollapseQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 515,
              "column": 6
            },
            "end": {
              "line": 522,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "collapseAt"
            }
          ]
        },
        {
          "name": "_collapsedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 6
            },
            "end": {
              "line": 526,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 528,
              "column": 6
            },
            "end": {
              "line": 538,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateDataExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 540,
              "column": 6
            },
            "end": {
              "line": 549,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcExtents",
          "description": "Calculate the min/max for both x and y axis based on the\nvalues found in the chart data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 555,
              "column": 6
            },
            "end": {
              "line": 572,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData"
            }
          ]
        },
        {
          "name": "_isExtEqual",
          "description": "Compares two extents objects and returns true if they are\nequal.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 578,
              "column": 6
            },
            "end": {
              "line": 589,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extA"
            },
            {
              "name": "extB"
            }
          ]
        },
        {
          "name": "_updateSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 591,
              "column": 6
            },
            "end": {
              "line": 606,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateSeriesKey",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 608,
              "column": 6
            },
            "end": {
              "line": 619,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateColorScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 621,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateInternalSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 6
            },
            "end": {
              "line": 652,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getInternalWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 666,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getInternalHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 680,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_selectedCellChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 682,
              "column": 6
            },
            "end": {
              "line": 710,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedCell"
            },
            {
              "name": "prevSelectedCell"
            }
          ]
        },
        {
          "name": "_xAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 712,
              "column": 6
            },
            "end": {
              "line": 717,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxisConfig"
            }
          ]
        },
        {
          "name": "_yAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 719,
              "column": 6
            },
            "end": {
              "line": 724,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yAxisConfig"
            }
          ]
        },
        {
          "name": "_legendConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 726,
              "column": 6
            },
            "end": {
              "line": 742,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "legendConfig"
            }
          ]
        },
        {
          "name": "_getLegend",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 744,
              "column": 6
            },
            "end": {
              "line": 750,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleMouseMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 752,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_handleClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 756,
              "column": 6
            },
            "end": {
              "line": 763,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getCellFromMouseEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 765,
              "column": 6
            },
            "end": {
              "line": 789,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getCellByPosition",
          "description": "Returns cell data from chartData which exist in the x and y categories.\nNote xPos and yPos are NOT pixel values, but values that should exist\nin the chartExtents or dataExtents.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 796,
              "column": 6
            },
            "end": {
              "line": 804,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xPos"
            },
            {
              "name": "yPos"
            }
          ]
        },
        {
          "name": "_handleCellMouseover",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 806,
              "column": 6
            },
            "end": {
              "line": 812,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "details"
            }
          ]
        },
        {
          "name": "_handleCellMouseout",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 814,
              "column": 6
            },
            "end": {
              "line": 817,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "details"
            }
          ]
        },
        {
          "name": "_showTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 819,
              "column": 6
            },
            "end": {
              "line": 830,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cell"
            },
            {
              "name": "msg"
            }
          ]
        },
        {
          "name": "_closeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 832,
              "column": 6
            },
            "end": {
              "line": 834,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createTooltipMessage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 836,
              "column": 6
            },
            "end": {
              "line": 843,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cell"
            }
          ]
        },
        {
          "name": "_resolveCssVars",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 845,
              "column": 6
            },
            "end": {
              "line": 871,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkThemeColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 873,
              "column": 6
            },
            "end": {
              "line": 888,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rulePrefix"
            },
            {
              "name": "defaultColors"
            }
          ]
        },
        {
          "name": "_colorsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 890,
              "column": 6
            },
            "end": {
              "line": 892,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 187,
          "column": 12
        },
        "end": {
          "line": 894,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1092,
              "column": 4
            },
            "end": {
              "line": 1095,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1106,
              "column": 4
            },
            "end": {
              "line": 1109,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 8
            },
            "end": {
              "line": 238,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 247,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-data",
          "description": "Container for the data object that drives the chart.",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 8
            },
            "end": {
              "line": 222,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1220,
              "column": 4
            },
            "end": {
              "line": 1223,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 264,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2803,
              "column": 4
            },
            "end": {
              "line": 2806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.canvasLayersConfig"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1190,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1198,
              "column": 4
            },
            "end": {
              "line": 1200,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "prevent-resize",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 766,
              "column": 6
            },
            "end": {
              "line": 770,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-horizontal-alignment",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 780,
              "column": 6
            },
            "end": {
              "line": 783,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-vertical-alignment",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 793,
              "column": 6
            },
            "end": {
              "line": 796,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounce-resize-timing",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 808,
              "column": 6
            },
            "end": {
              "line": 811,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "description": "Array of the svg layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1428,
              "column": 4
            },
            "end": {
              "line": 1431,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "number-of-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1432,
              "column": 4
            },
            "end": {
              "line": 1434,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generate-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1435,
              "column": 4
            },
            "end": {
              "line": 1438,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "px-svg-elem-lower",
          "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 280,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        },
        {
          "name": "series-key",
          "description": "Key that is tied to the seriesConfig.",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 8
            },
            "end": {
              "line": 229,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "square-mode",
          "description": "If true, the heatmap will always show cells as squares. The shortest\nof the x and y axis will be used for the length.",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 8
            },
            "end": {
              "line": 273,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "show-legend",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 8
            },
            "end": {
              "line": 278,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "scale-padding",
          "description": "Padding between boxes.",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 8
            },
            "end": {
              "line": 286,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "padding-outer",
          "description": "Padding between boxes and axis.",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 8
            },
            "end": {
              "line": 294,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "show-cell-value",
          "description": "Show the point value inside each cell.",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 8
            },
            "end": {
              "line": 302,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "colors",
          "description": "Colors to use for the heatmap.",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 309,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "legend-config",
          "description": "Configuration object passed directly to the color scale legend.\nSee px-vis-heatmap-legend.html for available properties.",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 8
            },
            "end": {
              "line": 317,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "tooltip-delay",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "draw-debounce-time",
          "description": "Delay draw by this amount of milliseconds.\nUseful for avoiding mutliple quick redraws.",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 8
            },
            "end": {
              "line": 331,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "collapse-at",
          "description": "The width below which the context browser will collapse into a mobile\nfriendly menu that slides up from the bottom of the page. Use a number\n(e.g. `450`) which will be converted to a pixel value (e.g. '450px').\n\nIf no value is provided, the context browser will not collapse\nautomatically. The collapsed attribute can also be used to manually\ncollapse and un-collapse the context browser.",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 8
            },
            "end": {
              "line": 344,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "collapsed",
          "description": "Watch for changes to determine if the context browser is collapsed.",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "cell-border-color",
          "description": "Color of cell border. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 8
            },
            "end": {
              "line": 361,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "cell-border-width",
          "description": "Width of cell border. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 8
            },
            "end": {
              "line": 368,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "cell-text-color",
          "description": "Color of text used for cell value. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 8
            },
            "end": {
              "line": 375,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "selected-cell",
          "description": "Currently selected cell object. Setting this will cause the cell to be shown\nthe same way it would with a mouse hover event. This should be an object from the\nchartData array.",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 8
            },
            "end": {
              "line": 385,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "cell-text-size",
          "description": "Size of text used for cell value. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 8
            },
            "end": {
              "line": 392,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "layer-changed",
          "description": "Fired when the `layer` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-lower-changed",
          "description": "Fired when the `pxSvgElemLower` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        },
        {
          "type": "CustomEvent",
          "name": "collapsed-changed",
          "description": "Fired when the `collapsed` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap"
    }
  ]
}
