{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap-cell.html",
      "properties": [
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1986,
              "column": 4
            },
            "end": {
              "line": 1988,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "data",
          "type": "Object",
          "description": "Data used to draw the cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "showCellValue",
          "type": "boolean",
          "description": "True will render the data value in the cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "colorScale",
          "type": "Function",
          "description": "Function used to convert values to colors.\n\nExample of colorScale creation:\n\nconst colorScale = Px.d3.scaleLinear()\n  .domain([0, 25, 50])\n  .range(['blue', 'red', 'green']);",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "fillColor",
          "type": "string",
          "description": "Fill color of cell. If set, this color will override the default color\nwhich is calculated by the cell value and the color scale.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "strokeColor",
          "type": "string",
          "description": "Stroke color of cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "textAlign",
          "type": "string",
          "description": "Text alignment for the cell value text. Choice:\n'start'\n'middle'\n'end'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"middle\""
        },
        {
          "name": "textColor",
          "type": "string",
          "description": "Color of text inside cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"#000\""
        },
        {
          "name": "fontSize",
          "type": "string",
          "description": "Size of text inside cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 8
            },
            "end": {
              "line": 95,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "fontFamily",
          "type": "string",
          "description": "Font family of text inside cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "A delay time used for drawing/updating the cell.\nThis helps ensure the draw function is not called too\nmany times when not needed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "50"
        },
        {
          "name": "_svgGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 453,
              "column": 2
            },
            "end": {
              "line": 459,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 484,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_draw",
          "description": "Draw or update the cell.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawDebounced",
          "description": "Draw but delay by debounce time.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getValue",
          "description": "Gets value from this.data object using keys in the completeSeriesConfig.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ]
        },
        {
          "name": "_isValidSvgPoints",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_updateColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_appendRectangle",
          "description": "Draw rectangle to existing svg element. Coordinates passed in by 'data.x' and 'data.y'\nshould define the upper left point of the rectangle.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 6
            },
            "end": {
              "line": 226,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "strokeColor"
            },
            {
              "name": "fillColor"
            }
          ]
        },
        {
          "name": "_appendText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "text"
            },
            {
              "name": "color"
            },
            {
              "name": "textAnchor"
            },
            {
              "name": "fontFamily"
            },
            {
              "name": "fontSize"
            }
          ]
        },
        {
          "name": "_calcCellColor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 252,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 12
        },
        "end": {
          "line": 254,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1986,
              "column": 4
            },
            "end": {
              "line": 1988,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "data",
          "description": "Data used to draw the cell.",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "series-key",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "show-cell-value",
          "description": "True will render the data value in the cell.",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "color-scale",
          "description": "Function used to convert values to colors.\n\nExample of colorScale creation:\n\nconst colorScale = Px.d3.scaleLinear()\n  .domain([0, 25, 50])\n  .range(['blue', 'red', 'green']);",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "fill-color",
          "description": "Fill color of cell. If set, this color will override the default color\nwhich is calculated by the cell value and the color scale.",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "stroke-color",
          "description": "Stroke color of cell.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "text-align",
          "description": "Text alignment for the cell value text. Choice:\n'start'\n'middle'\n'end'",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "text-color",
          "description": "Color of text inside cell.",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "font-size",
          "description": "Size of text inside cell.",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 8
            },
            "end": {
              "line": 95,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "font-family",
          "description": "Font family of text inside cell.",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 102,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "draw-debounce-time",
          "description": "A delay time used for drawing/updating the cell.\nThis helps ensure the draw function is not called too\nmany times when not needed.",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap-cell"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap-legend.html",
      "properties": [
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1090,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1102,
              "column": 4
            },
            "end": {
              "line": 1105,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "400"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1180,
              "column": 4
            },
            "end": {
              "line": 1183,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "Container for the data object that drives the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 8
            },
            "end": {
              "line": 82,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"top\":0,\"right\":50,\"bottom\":0,\"left\":0}"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3240,
              "column": 4
            },
            "end": {
              "line": 3242,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3243,
              "column": 4
            },
            "end": {
              "line": 3246,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1196,
              "column": 4
            },
            "end": {
              "line": 1198,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1204,
              "column": 4
            },
            "end": {
              "line": 1206,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2243,
              "column": 5
            },
            "end": {
              "line": 2248,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "type": "Array",
          "description": "Array of the svg layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1434,
              "column": 4
            },
            "end": {
              "line": 1437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "numberOfLayers",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1438,
              "column": 4
            },
            "end": {
              "line": 1440,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generateLayers",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1441,
              "column": 4
            },
            "end": {
              "line": 1444,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "colorScale",
          "type": "Object",
          "description": "Function used to convert chart value to color value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3249,
              "column": 2
            },
            "end": {
              "line": 3270,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2250,
              "column": 2
            },
            "end": {
              "line": 2257,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_createLayers",
          "description": "Creates <g> layers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1454,
              "column": 2
            },
            "end": {
              "line": 1477,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createLayersOnce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1478,
              "column": 2
            },
            "end": {
              "line": 1489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "generateLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 884,
              "column": 4
            },
            "end": {
              "line": 902,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "drawElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 52,
          "column": 12
        },
        "end": {
          "line": 195,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1090,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1102,
              "column": 4
            },
            "end": {
              "line": 1105,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1180,
              "column": 4
            },
            "end": {
              "line": 1183,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-data",
          "description": "Container for the data object that drives the chart.",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 8
            },
            "end": {
              "line": 82,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "data-extents",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1196,
              "column": 4
            },
            "end": {
              "line": 1198,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1204,
              "column": 4
            },
            "end": {
              "line": 1206,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "description": "Array of the svg layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1434,
              "column": 4
            },
            "end": {
              "line": 1437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "number-of-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1438,
              "column": 4
            },
            "end": {
              "line": 1440,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generate-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1441,
              "column": 4
            },
            "end": {
              "line": 1444,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "color-scale",
          "description": "Function used to convert chart value to color value.",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "layer-changed",
          "description": "Fired when the `layer` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorChart.layers"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap-legend"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap.html",
      "properties": [
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1090,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1102,
              "column": 4
            },
            "end": {
              "line": 1105,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "500"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 152,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "500"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1180,
              "column": 4
            },
            "end": {
              "line": 1183,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "Container for the data object that drives the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1216,
              "column": 4
            },
            "end": {
              "line": 1219,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 8
            },
            "end": {
              "line": 169,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"top\":10,\"right\":10,\"bottom\":50,\"left\":50}"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3240,
              "column": 4
            },
            "end": {
              "line": 3242,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3243,
              "column": 4
            },
            "end": {
              "line": 3246,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1196,
              "column": 4
            },
            "end": {
              "line": 1198,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1204,
              "column": 4
            },
            "end": {
              "line": 1206,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2243,
              "column": 5
            },
            "end": {
              "line": 2248,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "type": "Array",
          "description": "Array of the svg layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1434,
              "column": 4
            },
            "end": {
              "line": 1437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "numberOfLayers",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1438,
              "column": 4
            },
            "end": {
              "line": 1440,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generateLayers",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1441,
              "column": 4
            },
            "end": {
              "line": 1444,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "Key that is tied to the seriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "scalePadding",
          "type": "number",
          "description": "Padding between boxes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 8
            },
            "end": {
              "line": 177,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "paddingOuter",
          "type": "number",
          "description": "Padding between boxes and axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 8
            },
            "end": {
              "line": 185,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "showCellValue",
          "type": "boolean",
          "description": "Show the point value inside each cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "colors",
          "type": "Array",
          "description": "Colors to use for the heatmap.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 207,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"red\",\"blue\",\"green\"]"
        },
        {
          "name": "_cellData",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 8
            },
            "end": {
              "line": 211,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_colorsAreSet",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 8
            },
            "end": {
              "line": 216,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_colorScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 8
            },
            "end": {
              "line": 220,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 242,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3249,
              "column": 2
            },
            "end": {
              "line": 3270,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2250,
              "column": 2
            },
            "end": {
              "line": 2257,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_createLayers",
          "description": "Creates <g> layers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1454,
              "column": 2
            },
            "end": {
              "line": 1477,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createLayersOnce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1478,
              "column": 2
            },
            "end": {
              "line": 1489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "generateLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 884,
              "column": 4
            },
            "end": {
              "line": 902,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_updateDataExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 253,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcExtents",
          "description": "Calculate the min/max for both x and y axis based on the\nvalues found in the chart data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData"
            }
          ]
        },
        {
          "name": "_isExtEqual",
          "description": "Compares two extents objects and returns true if they are\nequal.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extA"
            },
            {
              "name": "extB"
            }
          ]
        },
        {
          "name": "_updateSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateSeriesKey",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_xAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 6
            },
            "end": {
              "line": 325,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxisConfig"
            }
          ]
        },
        {
          "name": "_yAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yAxisConfig"
            }
          ]
        },
        {
          "name": "_colorsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getLegendMargin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 6
            },
            "end": {
              "line": 355,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateColorScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 6
            },
            "end": {
              "line": 379,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 97,
          "column": 12
        },
        "end": {
          "line": 381,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1090,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1102,
              "column": 4
            },
            "end": {
              "line": 1105,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 152,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1180,
              "column": 4
            },
            "end": {
              "line": 1183,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-data",
          "description": "Container for the data object that drives the chart.",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1216,
              "column": 4
            },
            "end": {
              "line": 1219,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 8
            },
            "end": {
              "line": 169,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1196,
              "column": 4
            },
            "end": {
              "line": 1198,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1204,
              "column": 4
            },
            "end": {
              "line": 1206,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "description": "Array of the svg layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1434,
              "column": 4
            },
            "end": {
              "line": 1437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "number-of-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1438,
              "column": 4
            },
            "end": {
              "line": 1440,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generate-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1441,
              "column": 4
            },
            "end": {
              "line": 1444,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "series-key",
          "description": "Key that is tied to the seriesConfig.",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "scale-padding",
          "description": "Padding between boxes.",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 8
            },
            "end": {
              "line": 177,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "padding-outer",
          "description": "Padding between boxes and axis.",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 8
            },
            "end": {
              "line": 185,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "show-cell-value",
          "description": "Show the point value inside each cell.",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "colors",
          "description": "Colors to use for the heatmap.",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 207,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "layer-changed",
          "description": "Fired when the `layer` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorChart.layers"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap"
    }
  ]
}
