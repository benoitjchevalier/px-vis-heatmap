{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap-legend.html",
      "properties": [
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1083,
              "column": 4
            },
            "end": {
              "line": 1086,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1097,
              "column": 4
            },
            "end": {
              "line": 1100,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "Widht of the entire charting area.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 106,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the entire charting area.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "400"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1178,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 398,
              "column": 7
            },
            "end": {
              "line": 401,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1211,
              "column": 4
            },
            "end": {
              "line": 1214,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1929,
              "column": 4
            },
            "end": {
              "line": 1931,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3189,
              "column": 4
            },
            "end": {
              "line": 3191,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3192,
              "column": 4
            },
            "end": {
              "line": 3195,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "domainChanged",
          "type": "number",
          "description": "Number which increments up when the domain(s) has(have) changed.\n\n0 (false) indicates that domains have not been set.\n\nServes as a trigger for many elements to redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1225,
              "column": 4
            },
            "end": {
              "line": 1227,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1233,
              "column": 4
            },
            "end": {
              "line": 1235,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "colorScale",
          "type": "Object",
          "description": "Function used to convert chart value to color value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Position and direction of the legend.\n\n'right': positioned vertically on the right of the chart.\n'bottom': positioned horizontally below the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "legendWidth",
          "type": "number",
          "description": "Widht of the color scale legend. This does not include the axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 97,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "50"
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time before drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "gapSize",
          "type": "number",
          "description": "Gap between the heatmap and this legend.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15"
        },
        {
          "name": "borderColor",
          "type": "string",
          "description": "Color of border surrounding legend. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "borderWidth",
          "type": "string",
          "description": "Width of border surrounding legend. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 145,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_emptyChartData",
          "type": "Array",
          "description": "This component doesn't use chartData, but some px-vis\ncomps require a valid chart data object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 8
            },
            "end": {
              "line": 161,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_axisMargin",
          "type": "Object",
          "description": "Calculated margin used for the legend's axis.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"top\":0,\"right\":0,\"bottom\":0,\"left\":0}"
        },
        {
          "name": "_axisOrientation",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 8
            },
            "end": {
              "line": 181,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "_axisY",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 8
            },
            "end": {
              "line": 185,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisX",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisDomainChanged",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 8
            },
            "end": {
              "line": 198,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_axisExtents",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 8
            },
            "end": {
              "line": 202,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_rect",
          "type": "Object",
          "description": "svg rect object used to show gradient.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 8
            },
            "end": {
              "line": 209,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_gradientDef",
          "type": "Object",
          "description": "Svg definition for gradient.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 8
            },
            "end": {
              "line": 216,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_stylesResolved",
          "type": "boolean",
          "description": "Observe changes to this in order to know when css vars have changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 346,
              "column": 2
            },
            "end": {
              "line": 349,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 818,
              "column": 2
            },
            "end": {
              "line": 826,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 834,
              "column": 2
            },
            "end": {
              "line": 839,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 847,
              "column": 2
            },
            "end": {
              "line": 852,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 869,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 871,
              "column": 2
            },
            "end": {
              "line": 883,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 891,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 903,
              "column": 2
            },
            "end": {
              "line": 908,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 913,
              "column": 2
            },
            "end": {
              "line": 915,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 920,
              "column": 2
            },
            "end": {
              "line": 937,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 942,
              "column": 2
            },
            "end": {
              "line": 953,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 958,
              "column": 2
            },
            "end": {
              "line": 976,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 981,
              "column": 2
            },
            "end": {
              "line": 999,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1001,
              "column": 2
            },
            "end": {
              "line": 1031,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1036,
              "column": 2
            },
            "end": {
              "line": 1049,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1051,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3198,
              "column": 2
            },
            "end": {
              "line": 3219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 903,
              "column": 4
            },
            "end": {
              "line": 921,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_normalizeChartDataItem",
          "description": "Convenience method for applying completeSeriesConfig keys to a\nchartData item and returning an object with standard\nheatmap data keys (x, y, and value).",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-heatmap-behavior.html",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataItem"
            }
          ],
          "inheritedFrom": "PxBehaviorHeatmap.normalizeObjects"
        },
        {
          "name": "_normalizeExtentsObj",
          "description": "Convenience method for applying completeSeriesConfig keys to a\nextents item (dataExtents or chartExtents) and returning an object with standard\nheatmap data keys (x, y, and value).",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-heatmap-behavior.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxBehaviorHeatmap.normalizeObjects"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_defineGradient",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 6
            },
            "end": {
              "line": 285,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawRectangle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateRectangePosition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 344,
              "column": 6
            },
            "end": {
              "line": 349,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 6
            },
            "end": {
              "line": 356,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisMargin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 358,
              "column": 6
            },
            "end": {
              "line": 380,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxisOrientation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 6
            },
            "end": {
              "line": 386,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 6
            },
            "end": {
              "line": 395,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_yAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 397,
              "column": 6
            },
            "end": {
              "line": 402,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yAxisConfig"
            }
          ]
        },
        {
          "name": "_resolveCssVars",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 6
            },
            "end": {
              "line": 419,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 50,
          "column": 12
        },
        "end": {
          "line": 421,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains displayed logarithmicly. NOTE: Per d3 docs, this scale cannot cross or include 0.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1083,
              "column": 4
            },
            "end": {
              "line": 1086,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1097,
              "column": 4
            },
            "end": {
              "line": 1100,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "description": "Widht of the entire charting area.",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 106,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the entire charting area.",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1178,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 398,
              "column": 7
            },
            "end": {
              "line": 401,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1211,
              "column": 4
            },
            "end": {
              "line": 1214,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1929,
              "column": 4
            },
            "end": {
              "line": 1931,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "domain-changed",
          "description": "Number which increments up when the domain(s) has(have) changed.\n\n0 (false) indicates that domains have not been set.\n\nServes as a trigger for many elements to redraw.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1225,
              "column": 4
            },
            "end": {
              "line": 1227,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1233,
              "column": 4
            },
            "end": {
              "line": 1235,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "color-scale",
          "description": "Function used to convert chart value to color value.",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "orientation",
          "description": "Position and direction of the legend.\n\n'right': positioned vertically on the right of the chart.\n'bottom': positioned horizontally below the chart.",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "legend-width",
          "description": "Widht of the color scale legend. This does not include the axis.",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 97,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time before drawing.",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "gap-size",
          "description": "Gap between the heatmap and this legend.",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "border-color",
          "description": "Color of border surrounding legend. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "border-width",
          "description": "Width of border surrounding legend. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 145,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "domain-changed-changed",
          "description": "Fired when the `domainChanged` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap-legend"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap-custom-column.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1178,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 398,
              "column": 7
            },
            "end": {
              "line": 401,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1211,
              "column": 4
            },
            "end": {
              "line": 1214,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1929,
              "column": 4
            },
            "end": {
              "line": 1931,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3189,
              "column": 4
            },
            "end": {
              "line": 3191,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3192,
              "column": 4
            },
            "end": {
              "line": 3195,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "domainChanged",
          "type": "number",
          "description": "Number which increments up when the domain(s) has(have) changed.\n\n0 (false) indicates that domains have not been set.\n\nServes as a trigger for many elements to redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "columnData",
          "type": "Array",
          "description": "Array containing values to show in the custom column.\nEach object in the array must contain a the y-axis\nvalue to align with and a value to display.\n\n```\n[{\n  y: 'Asset 1',\n  value: 20\n }, {\n  y: 'Asset 2',\n  value: 24\n}, {\n  y: 'Asset 3',\n  value: 40\n}]\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "columnLabel",
          "type": "string",
          "description": "Label text that is shown on the x-axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "columnWidth",
          "type": "number",
          "description": "Width of the column in px.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "borderColor",
          "type": "string",
          "description": "Color of border surrounding legend. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"black\""
        },
        {
          "name": "borderWidth",
          "type": "string",
          "description": "Width of border surrounding legend. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"1px\""
        },
        {
          "name": "textColor",
          "type": "string",
          "description": "Text color of the cell values. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"black\""
        },
        {
          "name": "textSize",
          "type": "string",
          "description": "Text size of the cell values. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"12px\""
        },
        {
          "name": "columnLabelTextColor",
          "type": "string",
          "description": "Text color of the axis label. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 111,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "columnLabelTextSize",
          "type": "string",
          "description": "Text size of the axis label. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "columnLabelSpacing",
          "type": "number",
          "description": "Distance the axis label from axis. Set by series config or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15"
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time before drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "_stylesResolved",
          "type": "boolean",
          "description": "Observe changes to this in order to know when css vars have changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_svgGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 8
            },
            "end": {
              "line": 146,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 346,
              "column": 2
            },
            "end": {
              "line": 349,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 818,
              "column": 2
            },
            "end": {
              "line": 826,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 834,
              "column": 2
            },
            "end": {
              "line": 839,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 847,
              "column": 2
            },
            "end": {
              "line": 852,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 869,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 871,
              "column": 2
            },
            "end": {
              "line": 883,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 891,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 903,
              "column": 2
            },
            "end": {
              "line": 908,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 913,
              "column": 2
            },
            "end": {
              "line": 915,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 920,
              "column": 2
            },
            "end": {
              "line": 937,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 942,
              "column": 2
            },
            "end": {
              "line": 953,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 958,
              "column": 2
            },
            "end": {
              "line": 976,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 981,
              "column": 2
            },
            "end": {
              "line": 999,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1001,
              "column": 2
            },
            "end": {
              "line": 1031,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1036,
              "column": 2
            },
            "end": {
              "line": 1049,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1051,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3198,
              "column": 2
            },
            "end": {
              "line": 3219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 903,
              "column": 4
            },
            "end": {
              "line": 921,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_normalizeChartDataItem",
          "description": "Convenience method for applying completeSeriesConfig keys to a\nchartData item and returning an object with standard\nheatmap data keys (x, y, and value).",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-heatmap-behavior.html",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataItem"
            }
          ],
          "inheritedFrom": "PxBehaviorHeatmap.normalizeObjects"
        },
        {
          "name": "_normalizeExtentsObj",
          "description": "Convenience method for applying completeSeriesConfig keys to a\nextents item (dataExtents or chartExtents) and returning an object with standard\nheatmap data keys (x, y, and value).",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-heatmap-behavior.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxBehaviorHeatmap.normalizeObjects"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_appendSvgLine",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "x1"
            },
            {
              "name": "x2"
            },
            {
              "name": "y1"
            },
            {
              "name": "y2"
            },
            {
              "name": "stroke"
            },
            {
              "name": "strokeWidth"
            }
          ]
        },
        {
          "name": "_appendSvgText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 6
            },
            "end": {
              "line": 226,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "text"
            },
            {
              "name": "textColor"
            },
            {
              "name": "textSize"
            }
          ]
        },
        {
          "name": "_resolveCssVars",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 12
        },
        "end": {
          "line": 251,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1178,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 398,
              "column": 7
            },
            "end": {
              "line": 401,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1211,
              "column": 4
            },
            "end": {
              "line": 1214,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1929,
              "column": 4
            },
            "end": {
              "line": 1931,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "domain-changed",
          "description": "Number which increments up when the domain(s) has(have) changed.\n\n0 (false) indicates that domains have not been set.\n\nServes as a trigger for many elements to redraw.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "column-data",
          "description": "Array containing values to show in the custom column.\nEach object in the array must contain a the y-axis\nvalue to align with and a value to display.\n\n```\n[{\n  y: 'Asset 1',\n  value: 20\n }, {\n  y: 'Asset 2',\n  value: 24\n}, {\n  y: 'Asset 3',\n  value: 40\n}]\n```",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "column-label",
          "description": "Label text that is shown on the x-axis.",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "column-width",
          "description": "Width of the column in px.",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "border-color",
          "description": "Color of border surrounding legend. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "border-width",
          "description": "Width of border surrounding legend. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "text-color",
          "description": "Text color of the cell values. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "text-size",
          "description": "Text size of the cell values. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "column-label-text-color",
          "description": "Text color of the axis label. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 111,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "column-label-text-size",
          "description": "Text size of the axis label. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "column-label-spacing",
          "description": "Distance the axis label from axis. Set by series config or css var.",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time before drawing.",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "domain-changed-changed",
          "description": "Fired when the `domainChanged` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap-custom-column"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-vis-heatmap.html",
      "properties": [
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 606,
              "column": 8
            },
            "end": {
              "line": 609,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"scaleBand\""
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1097,
              "column": 4
            },
            "end": {
              "line": 1100,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 8
            },
            "end": {
              "line": 345,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "500"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "500"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1178,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 398,
              "column": 7
            },
            "end": {
              "line": 401,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "Container for the data object that drives the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 313,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1211,
              "column": 4
            },
            "end": {
              "line": 1214,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 8
            },
            "end": {
              "line": 371,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"top\":10,\"right\":100,\"bottom\":50,\"left\":50}"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3189,
              "column": 4
            },
            "end": {
              "line": 3191,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3192,
              "column": 4
            },
            "end": {
              "line": 3195,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2743,
              "column": 4
            },
            "end": {
              "line": 2746,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.canvasLayersConfig"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "domainChanged",
          "type": "number",
          "description": "Number which increments up when the domain(s) has(have) changed.\n\n0 (false) indicates that domains have not been set.\n\nServes as a trigger for many elements to redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1225,
              "column": 4
            },
            "end": {
              "line": 1227,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1233,
              "column": 4
            },
            "end": {
              "line": 1235,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "preventResize",
          "type": "boolean",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 790,
              "column": 6
            },
            "end": {
              "line": 794,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_preventResizeChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartHorizontalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 804,
              "column": 6
            },
            "end": {
              "line": 807,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartVerticalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 817,
              "column": 6
            },
            "end": {
              "line": 820,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_chartWrapperClass",
          "type": "string",
          "description": "Class to be used on the external wrapper within the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 824,
              "column": 6
            },
            "end": {
              "line": 827,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounceResizeTiming",
          "type": "number",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 832,
              "column": 6
            },
            "end": {
              "line": 835,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "250",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2186,
              "column": 5
            },
            "end": {
              "line": 2191,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "type": "Array",
          "description": "Array of the svg layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1463,
              "column": 4
            },
            "end": {
              "line": 1466,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "numberOfLayers",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1467,
              "column": 4
            },
            "end": {
              "line": 1469,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generateLayers",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1470,
              "column": 4
            },
            "end": {
              "line": 1473,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "pxSvgElemLower",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 280,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2344,
              "column": 4
            },
            "end": {
              "line": 2347,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "renderToCanvas",
          "type": "boolean",
          "description": "Boolean to specify if drawings should render to canvas instead of svg",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 385,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_renderToCanvasChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2250,
              "column": 4
            },
            "end": {
              "line": 2253,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Delay draw by this amount of milliseconds.\nUseful for avoiding mutliple quick redraws.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 476,
              "column": 8
            },
            "end": {
              "line": 479,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "100"
        },
        {
          "name": "_oldDrawDebounceTime",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "debounceOnPanning",
          "type": "boolean",
          "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 460,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 471,
              "column": 5
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "_progressiveRenderingCounter",
          "type": "Object",
          "description": "Counter to track progressive rendering requests and only draw the latest one",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_canvasTargets",
          "type": "Object",
          "description": "Current registered targets to draw on canvas during rendering",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_svgTargets",
          "type": "Object",
          "description": "Current registered targets to draw on svg during rendering",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "rendererMinimumPointsPerFrame",
          "type": "number",
          "description": "The minimum number of points to render per frame\neven if the chart is laggy",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "50",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "rendererFrameDurationTarget",
          "type": "number",
          "description": "Target duration (in ms) for one frame. The renderer will try to render\nas much data as possible in that given timeframe before calling the next\nanimation frame.\nWARNING: this needs to be higher than 16ms since by default\nrequestAnimationFrame will be called every ~16ms, so our target needs to\nbe higher to ensure we keep the processor busy",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "20",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_internalRendererFrameDurationTarget",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "20",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "rendererFrameCountToAverage",
          "type": "number",
          "description": "Number of previous frames to average for the adaptive\nprogressive rendering",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "3",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_previousFramesTiming",
          "type": "Object",
          "description": "For each renderer type the previous frames number of points and duration for line and scatter",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 194,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_hasBeenDetached",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "type": "Function",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 618,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "preventWebWorkerSynchronization",
          "type": "boolean",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3061,
              "column": 6
            },
            "end": {
              "line": 3064,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "_extents",
          "type": "Array",
          "description": "Holder for chart extents from the seriesConfig object",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[[],[]]",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataHasChanged",
          "type": "number",
          "description": "Boolean to detect if the chart data has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calculatingDomain",
          "type": "boolean",
          "description": "Boolean to indicate if we are currently calculating the domain",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_defaultScaleValue",
          "type": "Object",
          "description": "default extents to use if none are specified\n\n0 for y axis for best practice",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 59,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"x\":[null],\"y\":[null]}",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "disableDynamicUpdate",
          "type": "boolean",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_runOnce",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chartId",
          "type": "string",
          "description": "Internal unique ID",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "scalePadding",
          "type": "number",
          "description": "Padding between boxes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 8
            },
            "end": {
              "line": 431,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "paddingOuter",
          "type": "number",
          "description": "Padding between boxes and axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "logBase",
          "type": "string",
          "description": "The base for logarithmic type scales",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "Key that is tied to the seriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 8
            },
            "end": {
              "line": 320,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"mouseout\":\"resetTooltip\",\"mousemove\":\"calcTooltipData\"}"
        },
        {
          "name": "showCustomColumn",
          "type": "boolean",
          "description": "Toggles an additional column at the end of the cells. Custom columns\nare defined by the customColumnData property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 8
            },
            "end": {
              "line": 380,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "customColumnConfig",
          "type": "Object",
          "description": "Sets the configuration and data for the custom column.\nThis object defines all aspects of the column including labe,\nwidth, and the data.\n\nExample of customColumnConfig object:\n\n{\n  columnLabel: 'Accuracy',\n  columnWidth: 75,\n  columnData: [{\n    y: 'Asset 1',\n    value: 10\n  },\n  {\n    y: 'Asset 2',\n    value: 20\n  },\n  {\n    y: 'Asset 3',\n    value: 30\n  }]\n }",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 8
            },
            "end": {
              "line": 409,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "squareMode",
          "type": "boolean",
          "description": "If true, the heatmap will always show cells as squares. The shortest\nof the x and y axis will be used for the length.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 8
            },
            "end": {
              "line": 418,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "showLegend",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 8
            },
            "end": {
              "line": 423,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "showCellValue",
          "type": "boolean",
          "description": "Show the point value inside each cell.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 8
            },
            "end": {
              "line": 447,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "colors",
          "type": "Array",
          "description": "Colors to use for the heatmap.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 452,
              "column": 8
            },
            "end": {
              "line": 454,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "legendConfig",
          "type": "Object",
          "description": "Configuration object passed directly to the color scale legend.\nSee px-vis-heatmap-legend.html for available properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 460,
              "column": 8
            },
            "end": {
              "line": 462,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "tooltipDelay",
          "type": "number",
          "description": "Delay in miliseconds before tooltip appears.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 467,
              "column": 8
            },
            "end": {
              "line": 470,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "collapseAt",
          "type": "number",
          "description": "The width below which the context browser will collapse into a mobile\nfriendly menu that slides up from the bottom of the page. Use a number\n(e.g. `450`) which will be converted to a pixel value (e.g. '450px').\n\nIf no value is provided, the context browser will not collapse\nautomatically. The collapsed attribute can also be used to manually\ncollapse and un-collapse the context browser.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 490,
              "column": 8
            },
            "end": {
              "line": 492,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "collapsed",
          "type": "boolean",
          "description": "Watch for changes to determine if the context browser is collapsed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 497,
              "column": 8
            },
            "end": {
              "line": 502,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_collapsedChanged\""
            }
          }
        },
        {
          "name": "cellBorderColor",
          "type": "string",
          "description": "Color of cell border. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 8
            },
            "end": {
              "line": 509,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cellBorderWidth",
          "type": "string",
          "description": "Width of cell border. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 514,
              "column": 8
            },
            "end": {
              "line": 516,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cellTextColor",
          "type": "string",
          "description": "Color of text used for cell value. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cellTextSize",
          "type": "string",
          "description": "Size of text used for cell value. Set by series config object or css var.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 532,
              "column": 8
            },
            "end": {
              "line": 534,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_cellData",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 536,
              "column": 8
            },
            "end": {
              "line": 538,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_colorsAreSet",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 540,
              "column": 8
            },
            "end": {
              "line": 543,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_internalColors",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 545,
              "column": 8
            },
            "end": {
              "line": 547,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_colorScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 549,
              "column": 8
            },
            "end": {
              "line": 551,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_legendOrientation",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 553,
              "column": 8
            },
            "end": {
              "line": 555,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_internalWidth",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 8
            },
            "end": {
              "line": 560,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "500"
        },
        {
          "name": "_internalHeight",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 562,
              "column": 8
            },
            "end": {
              "line": 565,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "500"
        },
        {
          "name": "_internalMargin",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 8
            },
            "end": {
              "line": 570,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_stylesResolved",
          "type": "boolean",
          "description": "Observe changes to this in order to know when css vars have changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 8
            },
            "end": {
              "line": 578,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_legendGapSize",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 580,
              "column": 8
            },
            "end": {
              "line": 583,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "_gridTranslationX",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 8
            },
            "end": {
              "line": 588,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_gridTranslationY",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 590,
              "column": 8
            },
            "end": {
              "line": 593,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_ttMouseCoords",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 595,
              "column": 8
            },
            "end": {
              "line": 600,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_highlightedData",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 602,
              "column": 8
            },
            "end": {
              "line": 604,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 653,
              "column": 6
            },
            "end": {
              "line": 656,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 223,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 346,
              "column": 2
            },
            "end": {
              "line": 349,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 647,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 224,
              "column": 2
            },
            "end": {
              "line": 232,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_preventResizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 838,
              "column": 4
            },
            "end": {
              "line": 846,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_getChartWrapperClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 847,
              "column": 4
            },
            "end": {
              "line": 871,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hor"
            },
            {
              "name": "vert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_onIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 873,
              "column": 4
            },
            "end": {
              "line": 881,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 818,
              "column": 2
            },
            "end": {
              "line": 826,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 834,
              "column": 2
            },
            "end": {
              "line": 839,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 847,
              "column": 2
            },
            "end": {
              "line": 852,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 869,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 871,
              "column": 2
            },
            "end": {
              "line": 883,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 891,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 903,
              "column": 2
            },
            "end": {
              "line": 908,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 913,
              "column": 2
            },
            "end": {
              "line": 915,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 920,
              "column": 2
            },
            "end": {
              "line": 937,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 942,
              "column": 2
            },
            "end": {
              "line": 953,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 958,
              "column": 2
            },
            "end": {
              "line": 976,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 981,
              "column": 2
            },
            "end": {
              "line": 999,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1001,
              "column": 2
            },
            "end": {
              "line": 1031,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1036,
              "column": 2
            },
            "end": {
              "line": 1049,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1051,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_createLayers",
          "description": "Creates <g> layers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1483,
              "column": 2
            },
            "end": {
              "line": 1506,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createLayersOnce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1507,
              "column": 2
            },
            "end": {
              "line": 1518,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "generateLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "getImage",
          "description": "Takes a graphic \"snapshot\" of the component and pass results through a callback:\n- a canvas containing the graphical snapshot\n- a png base 64 data uri\n\ncallback object:\n{\n canvas: theCanvasObject\n image: \"data:image/png;base64;iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN...\"\n}\n\nthe data uri can be used to save the image and the canvas object to do\nfurther processing, such as combining different elements snapshot into one image",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 674,
              "column": 6
            },
            "end": {
              "line": 688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "renderLegend"
            }
          ]
        },
        {
          "name": "_finishGetImage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 695,
              "column": 4
            },
            "end": {
              "line": 700,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "canvas"
            },
            {
              "name": "renderLegend"
            },
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_getRegisterWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 701,
              "column": 4
            },
            "end": {
              "line": 735,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_drawRegister",
          "description": "Draws a fake representation of the registers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 739,
              "column": 4
            },
            "end": {
              "line": 767,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "startWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 903,
              "column": 4
            },
            "end": {
              "line": 921,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_renderToCanvasChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 387,
              "column": 2
            },
            "end": {
              "line": 402,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "renderToCanvas"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
        },
        {
          "name": "_panningStarted",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "_panningStopped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "_initializeRendererTypeObject",
          "description": "Creates an object with all renderer types and a default value for each",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 237,
              "column": 2
            },
            "end": {
              "line": 245,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "initialVal"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_updateTargetProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 247,
              "column": 2
            },
            "end": {
              "line": 264,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_registerDrawingElement",
          "description": "Elements wanting to use the renderer need to fire an event which\nwill be processed here",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 280,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_unregisterDrawingElement",
          "description": "Elements wanting to use the renderer need to fire an event (on detached)\nwhich will be processed here",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 286,
              "column": 2
            },
            "end": {
              "line": 314,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderSeriesOnTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 321,
              "column": 2
            },
            "end": {
              "line": 353,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderTypedContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 355,
              "column": 2
            },
            "end": {
              "line": 388,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "renderType"
            },
            {
              "name": "canvasesToClear"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderChartData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 390,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderFilteredChartData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 412,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderHighlight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 414,
              "column": 2
            },
            "end": {
              "line": 424,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderMarkers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 426,
              "column": 2
            },
            "end": {
              "line": 431,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderAllLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 460,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderData",
          "description": "Initial entry point, debouncing as needed or cancel",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 468,
              "column": 2
            },
            "end": {
              "line": 485,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderDataDebounced",
          "description": "Ensure we the basic conditions for allowign rendering\nand start it",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 491,
              "column": 2
            },
            "end": {
              "line": 500,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            },
            {
              "name": "allowCanvasClearing"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_initializeCanvasRendering",
          "description": "Resets var relating to 1 complete rendering, call initializeDrawingSession\non all rendering targets and kick the process",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 506,
              "column": 2
            },
            "end": {
              "line": 528,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            },
            {
              "name": "allowCanvasClearing"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_processCanvasRendering",
          "description": "Called each frame.\n- Updates previous frame timings if there was one\n- Render what can be in the current frame\n- Exit or wait for next frame",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 536,
              "column": 2
            },
            "end": {
              "line": 573,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_processCanvasOneFrame",
          "description": "Rendering process during one frame. Calculate how many points can be\nrendered for the current target an render those. Keep rendering next\ntargets if we have enough time, based on same process",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 580,
              "column": 2
            },
            "end": {
              "line": 621,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_updatePreviousFrameTiming",
          "description": "Updates stats of the previous frame: how many points have been\nrendered per type and how long it took",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 627,
              "column": 2
            },
            "end": {
              "line": 659,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            },
            {
              "name": "now"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_getCurrentCanvasRenderingTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 661,
              "column": 2
            },
            "end": {
              "line": 668,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_firstCanvasRender",
          "description": "Used when rendering a target we don't have stats about. Assumes a first\nnumber of points to render, measure that and render more if we think we can",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 674,
              "column": 2
            },
            "end": {
              "line": 718,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderTargetToCanvas",
          "description": "Tries to render toRender number of points for the current target.\nreturns the number of points actually rendered and how much of the budget\nthis used",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 725,
              "column": 2
            },
            "end": {
              "line": 756,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toRender"
            },
            {
              "name": "ctx"
            },
            {
              "name": "currentBudget"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_calculatePointsAllowance",
          "description": "Calculates how many points we can render in one frame for the\ncontext current target. Based on stats of previous rendering of same type.\nReturns -1 if we don't have stats about this type of rendering",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 763,
              "column": 2
            },
            "end": {
              "line": 805,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_targetTimingChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 809,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_normalizeChartDataItem",
          "description": "Convenience method for applying completeSeriesConfig keys to a\nchartData item and returning an object with standard\nheatmap data keys (x, y, and value).",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-heatmap-behavior.html",
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataItem"
            }
          ],
          "inheritedFrom": "PxBehaviorHeatmap.normalizeObjects"
        },
        {
          "name": "_normalizeExtentsObj",
          "description": "Convenience method for applying completeSeriesConfig keys to a\nextents item (dataExtents or chartExtents) and returning an object with standard\nheatmap data keys (x, y, and value).",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-heatmap-behavior.html",
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxBehaviorHeatmap.normalizeObjects"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 453,
              "column": 2
            },
            "end": {
              "line": 459,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 484,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isTimeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3404,
              "column": 2
            },
            "end": {
              "line": 3406,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            }
          ],
          "inheritedFrom": "PxVisBehavior.scaleTypeCheck"
        },
        {
          "name": "_isOrdinalType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3408,
              "column": 2
            },
            "end": {
              "line": 3410,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            }
          ],
          "inheritedFrom": "PxVisBehavior.scaleTypeCheck"
        },
        {
          "name": "_recreateScales",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 121,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setXScale",
          "description": "Sets the x scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 145,
              "column": 2
            },
            "end": {
              "line": 150,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetXScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 151,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setYScale",
          "description": "Sets the y scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMultiYScale",
          "description": "Sets a multi y scale",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 211,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetMultiYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setScale",
          "description": "Helper function to set the x and y based on scale type",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 259,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "range"
            },
            {
              "name": "currentAxis"
            },
            {
              "name": "isMultiAxis"
            },
            {
              "name": "key"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setDomain",
          "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 302,
              "column": 3
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_createOrdinalInvert",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 369,
              "column": 2
            },
            "end": {
              "line": 381,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            },
            {
              "name": "invert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 383,
              "column": 2
            },
            "end": {
              "line": 434,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extents"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_determineExtents",
          "description": "Calculates the extents based on chartExtents, dataExtents, and the data.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 440,
              "column": 2
            },
            "end": {
              "line": 534,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkForExtents",
          "description": "Looks at chartExtents and dataExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 540,
              "column": 2
            },
            "end": {
              "line": 575,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "chartExtents"
            },
            {
              "name": "dataExtents"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkChartExtents",
          "description": "Looks at chartExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 581,
              "column": 2
            },
            "end": {
              "line": 589,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkDataExtents",
          "description": "Looks at dataExtents for extents values per axis; resolves chartExtents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 595,
              "column": 2
            },
            "end": {
              "line": 612,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dExts"
            },
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            },
            {
              "name": "bool"
            },
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findMinMax",
          "description": "Find the min and max values or ordinal values in data, for X and/or Y axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 619,
              "column": 2
            },
            "end": {
              "line": 644,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "doX"
            },
            {
              "name": "doY"
            },
            {
              "name": "ordX"
            },
            {
              "name": "ordY"
            },
            {
              "name": "timeX"
            },
            {
              "name": "result"
            },
            {
              "name": "keys"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_getDataExtents",
          "description": "Goes through the data and extracts min and max values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 650,
              "column": 2
            },
            "end": {
              "line": 664,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "keysArr"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findTimeMM",
          "description": "Finds time based Max and Min",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 670,
              "column": 2
            },
            "end": {
              "line": 677,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result"
            },
            {
              "name": "d"
            },
            {
              "name": "l"
            },
            {
              "name": "x"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMin",
          "description": "Compares existing min and new data for min",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 683,
              "column": 2
            },
            "end": {
              "line": 687,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMax",
          "description": "Compares existing max and new data for max",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 693,
              "column": 2
            },
            "end": {
              "line": 697,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_processDataValues",
          "description": "Goes through the values from the data and calcs the extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 703,
              "column": 2
            },
            "end": {
              "line": 719,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "r"
            },
            {
              "name": "d"
            },
            {
              "name": "axis"
            },
            {
              "name": "key"
            },
            {
              "name": "i"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            },
            {
              "name": "v0"
            },
            {
              "name": "v1"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkInSeriesConfig",
          "description": "Loop through each series and see if it has mins and maxes in seriesConfig",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 726,
              "column": 0
            },
            "end": {
              "line": 738,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyChartExtents",
          "description": "Apply chart extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 744,
              "column": 0
            },
            "end": {
              "line": 765,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_searchForExtents",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 771,
              "column": 0
            },
            "end": {
              "line": 787,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "seriesToSearch"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcSeriesToSearch",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 793,
              "column": 0
            },
            "end": {
              "line": 805,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            },
            {
              "name": "seriesToSearch"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcMultiAxisExtents",
          "description": "calculates chart extents for multi axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 811,
              "column": 0
            },
            "end": {
              "line": 855,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_updateDomain",
          "description": "When the domain gets set via a user interaction, set the scale function to use the new domain\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 864,
              "column": 2
            },
            "end": {
              "line": 889,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedDomain"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 890,
              "column": 2
            },
            "end": {
              "line": 895,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setAxisScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 897,
              "column": 2
            },
            "end": {
              "line": 935,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftDims"
            },
            {
              "name": "rightDims"
            },
            {
              "name": "leftAxisSize"
            },
            {
              "name": "rightAxisSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getPixelFromData",
          "description": "Gets pixel values for data values relating to a series (series is the id\nused in seriesConfig). data is an array: [xValue, yValue]\nif margin is specified it will use thos to adjust the pixel values\ninstead of the normal `margin` property\nreturns an object with the result and whether that result is out of\nbounds for the current domain",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 945,
              "column": 2
            },
            "end": {
              "line": 963,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "series"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getDataFromPixel",
          "description": "Gets data values for pixel values relating to a series (series is the id\nused in seriesConfig). pixelVal is an array: [xValue, yValue]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 971,
              "column": 2
            },
            "end": {
              "line": 979,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pixelVal"
            },
            {
              "name": "series"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_pixelRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 981,
              "column": 2
            },
            "end": {
              "line": 984,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_updatePadding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 986,
              "column": 2
            },
            "end": {
              "line": 1002,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_updateLogBase",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 1004,
              "column": 2
            },
            "end": {
              "line": 1027,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_fixLogExt",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 1029,
              "column": 2
            },
            "end": {
              "line": 1051,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ext"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_test",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 649,
              "column": 6
            },
            "end": {
              "line": 651,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_collapseQueryIsValid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 6
            },
            "end": {
              "line": 698,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query"
            }
          ]
        },
        {
          "name": "_getCollapseQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 700,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "collapseAt"
            }
          ]
        },
        {
          "name": "_collapsedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 709,
              "column": 6
            },
            "end": {
              "line": 711,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resizeCalculations",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 713,
              "column": 6
            },
            "end": {
              "line": 718,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateDataExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 720,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcExtents",
          "description": "Calculate the min/max for both x and y axis based on the\nvalues found in the chart data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 737,
              "column": 6
            },
            "end": {
              "line": 756,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData"
            }
          ]
        },
        {
          "name": "_isExtEqual",
          "description": "Compares two extents objects and returns true if they are\nequal.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 6
            },
            "end": {
              "line": 773,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extA"
            },
            {
              "name": "extB"
            }
          ]
        },
        {
          "name": "_updateSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 775,
              "column": 6
            },
            "end": {
              "line": 790,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateColorScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 6
            },
            "end": {
              "line": 812,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateInternalSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 814,
              "column": 6
            },
            "end": {
              "line": 839,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateInternalMargin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 841,
              "column": 6
            },
            "end": {
              "line": 861,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_tooltipDataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 863,
              "column": 6
            },
            "end": {
              "line": 889,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 891,
              "column": 6
            },
            "end": {
              "line": 901,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateLegendGapSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 903,
              "column": 6
            },
            "end": {
              "line": 918,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_xAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 920,
              "column": 6
            },
            "end": {
              "line": 925,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxisConfig"
            }
          ]
        },
        {
          "name": "_yAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 927,
              "column": 6
            },
            "end": {
              "line": 932,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yAxisConfig"
            }
          ]
        },
        {
          "name": "_legendConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 934,
              "column": 6
            },
            "end": {
              "line": 945,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showLegend"
            },
            {
              "name": "legendConfig"
            }
          ]
        },
        {
          "name": "_customColumnConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 947,
              "column": 6
            },
            "end": {
              "line": 957,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showCustomColumn"
            },
            {
              "name": "customColumnConfig"
            }
          ]
        },
        {
          "name": "_getLegend",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 959,
              "column": 6
            },
            "end": {
              "line": 965,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getCustomColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 967,
              "column": 6
            },
            "end": {
              "line": 973,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createTooltipMessage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 975,
              "column": 6
            },
            "end": {
              "line": 983,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_resolveCssVars",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 985,
              "column": 6
            },
            "end": {
              "line": 1015,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkThemeColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1017,
              "column": 6
            },
            "end": {
              "line": 1032,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rulePrefix"
            },
            {
              "name": "defaultColors"
            }
          ]
        },
        {
          "name": "_colorsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1034,
              "column": 6
            },
            "end": {
              "line": 1036,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeGridTranslationX",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1038,
              "column": 6
            },
            "end": {
              "line": 1042,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeGridTranslationY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1044,
              "column": 6
            },
            "end": {
              "line": 1048,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 275,
          "column": 12
        },
        "end": {
          "line": 1050,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "x-axis-type",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 606,
              "column": 8
            },
            "end": {
              "line": 609,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `scaleBand`: another ordinal type meant to create a bar instead of a point.\n- `linear`: for continuous input domains, such as numbers.\n- `log`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1097,
              "column": 4
            },
            "end": {
              "line": 1100,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 8
            },
            "end": {
              "line": 345,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1178,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 398,
              "column": 7
            },
            "end": {
              "line": 401,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-data",
          "description": "Container for the data object that drives the chart.",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 313,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1211,
              "column": 4
            },
            "end": {
              "line": 1214,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the\nmargin to accommodate axes and other elements which exist within the SVG frame,\nbut outside the chart frame.",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 8
            },
            "end": {
              "line": 371,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2743,
              "column": 4
            },
            "end": {
              "line": 2746,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.canvasLayersConfig"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "domain-changed",
          "description": "Number which increments up when the domain(s) has(have) changed.\n\n0 (false) indicates that domains have not been set.\n\nServes as a trigger for many elements to redraw.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 515,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1225,
              "column": 4
            },
            "end": {
              "line": 1227,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1233,
              "column": 4
            },
            "end": {
              "line": 1235,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "prevent-resize",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 790,
              "column": 6
            },
            "end": {
              "line": 794,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-horizontal-alignment",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 804,
              "column": 6
            },
            "end": {
              "line": 807,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-vertical-alignment",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 817,
              "column": 6
            },
            "end": {
              "line": 820,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounce-resize-timing",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 832,
              "column": 6
            },
            "end": {
              "line": 835,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "layer",
          "description": "Array of the svg layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1463,
              "column": 4
            },
            "end": {
              "line": 1466,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "number-of-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1467,
              "column": 4
            },
            "end": {
              "line": 1469,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generate-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1470,
              "column": 4
            },
            "end": {
              "line": 1473,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "px-svg-elem-lower",
          "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 280,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        },
        {
          "name": "render-to-canvas",
          "description": "Boolean to specify if drawings should render to canvas instead of svg",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 385,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2250,
              "column": 4
            },
            "end": {
              "line": 2253,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "draw-debounce-time",
          "description": "Delay draw by this amount of milliseconds.\nUseful for avoiding mutliple quick redraws.",
          "sourceRange": {
            "start": {
              "line": 476,
              "column": 8
            },
            "end": {
              "line": 479,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "debounce-on-panning",
          "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 460,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 471,
              "column": 5
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "renderer-minimum-points-per-frame",
          "description": "The minimum number of points to render per frame\neven if the chart is laggy",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "renderer-frame-duration-target",
          "description": "Target duration (in ms) for one frame. The renderer will try to render\nas much data as possible in that given timeframe before calling the next\nanimation frame.\nWARNING: this needs to be higher than 16ms since by default\nrequestAnimationFrame will be called every ~16ms, so our target needs to\nbe higher to ensure we keep the processor busy",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "renderer-frame-count-to-average",
          "description": "Number of previous frames to average for the adaptive\nprogressive rendering",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-renderer.html",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 618,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "prevent-web-worker-synchronization",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3061,
              "column": 6
            },
            "end": {
              "line": 3064,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "disable-dynamic-update",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chart-id",
          "description": "Internal unique ID",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "scale-padding",
          "description": "Padding between boxes.",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 8
            },
            "end": {
              "line": 431,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "padding-outer",
          "description": "Padding between boxes and axis.",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "log-base",
          "description": "The base for logarithmic type scales",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "series-key",
          "description": "Key that is tied to the seriesConfig.",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 8
            },
            "end": {
              "line": 320,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "show-custom-column",
          "description": "Toggles an additional column at the end of the cells. Custom columns\nare defined by the customColumnData property.",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 8
            },
            "end": {
              "line": 380,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "custom-column-config",
          "description": "Sets the configuration and data for the custom column.\nThis object defines all aspects of the column including labe,\nwidth, and the data.\n\nExample of customColumnConfig object:\n\n{\n  columnLabel: 'Accuracy',\n  columnWidth: 75,\n  columnData: [{\n    y: 'Asset 1',\n    value: 10\n  },\n  {\n    y: 'Asset 2',\n    value: 20\n  },\n  {\n    y: 'Asset 3',\n    value: 30\n  }]\n }",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 8
            },
            "end": {
              "line": 409,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "square-mode",
          "description": "If true, the heatmap will always show cells as squares. The shortest\nof the x and y axis will be used for the length.",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 8
            },
            "end": {
              "line": 418,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "show-legend",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 8
            },
            "end": {
              "line": 423,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "show-cell-value",
          "description": "Show the point value inside each cell.",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 8
            },
            "end": {
              "line": 447,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "colors",
          "description": "Colors to use for the heatmap.",
          "sourceRange": {
            "start": {
              "line": 452,
              "column": 8
            },
            "end": {
              "line": 454,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "legend-config",
          "description": "Configuration object passed directly to the color scale legend.\nSee px-vis-heatmap-legend.html for available properties.",
          "sourceRange": {
            "start": {
              "line": 460,
              "column": 8
            },
            "end": {
              "line": 462,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "tooltip-delay",
          "description": "Delay in miliseconds before tooltip appears.",
          "sourceRange": {
            "start": {
              "line": 467,
              "column": 8
            },
            "end": {
              "line": 470,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "collapse-at",
          "description": "The width below which the context browser will collapse into a mobile\nfriendly menu that slides up from the bottom of the page. Use a number\n(e.g. `450`) which will be converted to a pixel value (e.g. '450px').\n\nIf no value is provided, the context browser will not collapse\nautomatically. The collapsed attribute can also be used to manually\ncollapse and un-collapse the context browser.",
          "sourceRange": {
            "start": {
              "line": 490,
              "column": 8
            },
            "end": {
              "line": 492,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "collapsed",
          "description": "Watch for changes to determine if the context browser is collapsed.",
          "sourceRange": {
            "start": {
              "line": 497,
              "column": 8
            },
            "end": {
              "line": 502,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "cell-border-color",
          "description": "Color of cell border. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 8
            },
            "end": {
              "line": 509,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "cell-border-width",
          "description": "Width of cell border. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 514,
              "column": 8
            },
            "end": {
              "line": 516,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "cell-text-color",
          "description": "Color of text used for cell value. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "tooltip-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "cell-text-size",
          "description": "Size of text used for cell value. Set by series config object or css var.",
          "sourceRange": {
            "start": {
              "line": 532,
              "column": 8
            },
            "end": {
              "line": 534,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "domain-changed-changed",
          "description": "Fired when the `domainChanged` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "layer-changed",
          "description": "Fired when the `layer` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-lower-changed",
          "description": "Fired when the `pxSvgElemLower` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-chart-canvas-rendering-ended",
          "description": "px-vis-chart-canvas-rendering-ended",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-chart-canvas-rendering-started",
          "description": "px-vis-chart-canvas-rendering-started",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-extents-applied",
          "description": "px-vis-extents-applied",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "type": "CustomEvent",
          "name": "collapsed-changed",
          "description": "Fired when the `collapsed` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-heatmap"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "    Name:\n    PxBehaviorHeatmap.normalizeObjects\n\n    Description:\n    Behavior providing a convenience function for normalizing objects\n    an expected format using the completeSeriesConfig object.\n\n    ",
          "summary": "",
          "path": "px-heatmap-behavior.html",
          "properties": [],
          "methods": [
            {
              "name": "_normalizeChartDataItem",
              "description": "Convenience method for applying completeSeriesConfig keys to a\nchartData item and returning an object with standard\nheatmap data keys (x, y, and value).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 20,
                  "column": 2
                },
                "end": {
                  "line": 26,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataItem"
                }
              ]
            },
            {
              "name": "_normalizeExtentsObj",
              "description": "Convenience method for applying completeSeriesConfig keys to a\nextents item (dataExtents or chartExtents) and returning an object with standard\nheatmap data keys (x, y, and value).",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 2
                },
                "end": {
                  "line": 39,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "exts"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxBehaviorHeatmap.normalizeObjects",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}
